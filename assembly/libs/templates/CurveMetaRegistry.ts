// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import { ethereum, TypedMap, Address, BigInt } from '@graphprotocol/graph-ts'

export class CommitNewAdmin extends ethereum.Event {
  get params(): CommitNewAdmin__Params {
    return new CommitNewAdmin__Params(this)
  }
}

export class CommitNewAdmin__Params {
  _event: CommitNewAdmin

  constructor(event: CommitNewAdmin) {
    this._event = event
  }

  get deadline(): BigInt {
    return this._event.parameters[0].value.toBigInt()
  }

  get admin(): Address {
    return this._event.parameters[1].value.toAddress()
  }
}

export class NewAdmin extends ethereum.Event {
  get params(): NewAdmin__Params {
    return new NewAdmin__Params(this)
  }
}

export class NewAdmin__Params {
  _event: NewAdmin

  constructor(event: NewAdmin) {
    this._event = event
  }

  get admin(): Address {
    return this._event.parameters[0].value.toAddress()
  }
}

export class CurveMetaRegistry__get_coin_indicesResult {
  value0: BigInt
  value1: BigInt
  value2: boolean

  constructor(value0: BigInt, value1: BigInt, value2: boolean) {
    this.value0 = value0
    this.value1 = value1
    this.value2 = value2
  }

  toMap(): TypedMap<string, ethereum.Value> {
    const map = new TypedMap<string, ethereum.Value>()
    map.set('value0', ethereum.Value.fromSignedBigInt(this.value0))
    map.set('value1', ethereum.Value.fromSignedBigInt(this.value1))
    map.set('value2', ethereum.Value.fromBoolean(this.value2))
    return map
  }

  getValue0(): BigInt {
    return this.value0
  }

  getValue1(): BigInt {
    return this.value1
  }

  getValue2(): boolean {
    return this.value2
  }
}

export class CurveMetaRegistry__get_coin_indices1Result {
  value0: BigInt
  value1: BigInt
  value2: boolean

  constructor(value0: BigInt, value1: BigInt, value2: boolean) {
    this.value0 = value0
    this.value1 = value1
    this.value2 = value2
  }

  toMap(): TypedMap<string, ethereum.Value> {
    const map = new TypedMap<string, ethereum.Value>()
    map.set('value0', ethereum.Value.fromSignedBigInt(this.value0))
    map.set('value1', ethereum.Value.fromSignedBigInt(this.value1))
    map.set('value2', ethereum.Value.fromBoolean(this.value2))
    return map
  }

  getValue0(): BigInt {
    return this.value0
  }

  getValue1(): BigInt {
    return this.value1
  }

  getValue2(): boolean {
    return this.value2
  }
}

export class CurveMetaRegistry extends ethereum.SmartContract {
  static bind(address: Address): CurveMetaRegistry {
    return new CurveMetaRegistry('CurveMetaRegistry', address)
  }

  get_registry_handlers_from_pool(_pool: Address): Array<Address> {
    const result = super.call(
      'get_registry_handlers_from_pool',
      'get_registry_handlers_from_pool(address):(address[10])',
      [ethereum.Value.fromAddress(_pool)]
    )

    return result[0].toAddressArray()
  }

  try_get_registry_handlers_from_pool(
    _pool: Address
  ): ethereum.CallResult<Array<Address>> {
    const result = super.tryCall(
      'get_registry_handlers_from_pool',
      'get_registry_handlers_from_pool(address):(address[10])',
      [ethereum.Value.fromAddress(_pool)]
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    const value = result.value
    return ethereum.CallResult.fromValue(value[0].toAddressArray())
  }

  get_base_registry(registry_handler: Address): Address {
    const result = super.call(
      'get_base_registry',
      'get_base_registry(address):(address)',
      [ethereum.Value.fromAddress(registry_handler)]
    )

    return result[0].toAddress()
  }

  try_get_base_registry(
    registry_handler: Address
  ): ethereum.CallResult<Address> {
    const result = super.tryCall(
      'get_base_registry',
      'get_base_registry(address):(address)',
      [ethereum.Value.fromAddress(registry_handler)]
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    const value = result.value
    return ethereum.CallResult.fromValue(value[0].toAddress())
  }

  find_pool_for_coins(_from: Address, _to: Address): Address {
    const result = super.call(
      'find_pool_for_coins',
      'find_pool_for_coins(address,address):(address)',
      [ethereum.Value.fromAddress(_from), ethereum.Value.fromAddress(_to)]
    )

    return result[0].toAddress()
  }

  try_find_pool_for_coins(
    _from: Address,
    _to: Address
  ): ethereum.CallResult<Address> {
    const result = super.tryCall(
      'find_pool_for_coins',
      'find_pool_for_coins(address,address):(address)',
      [ethereum.Value.fromAddress(_from), ethereum.Value.fromAddress(_to)]
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    const value = result.value
    return ethereum.CallResult.fromValue(value[0].toAddress())
  }

  find_pool_for_coins1(_from: Address, _to: Address, i: BigInt): Address {
    const result = super.call(
      'find_pool_for_coins',
      'find_pool_for_coins(address,address,uint256):(address)',
      [
        ethereum.Value.fromAddress(_from),
        ethereum.Value.fromAddress(_to),
        ethereum.Value.fromUnsignedBigInt(i)
      ]
    )

    return result[0].toAddress()
  }

  try_find_pool_for_coins1(
    _from: Address,
    _to: Address,
    i: BigInt
  ): ethereum.CallResult<Address> {
    const result = super.tryCall(
      'find_pool_for_coins',
      'find_pool_for_coins(address,address,uint256):(address)',
      [
        ethereum.Value.fromAddress(_from),
        ethereum.Value.fromAddress(_to),
        ethereum.Value.fromUnsignedBigInt(i)
      ]
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    const value = result.value
    return ethereum.CallResult.fromValue(value[0].toAddress())
  }

  find_pools_for_coins(_from: Address, _to: Address): Array<Address> {
    const result = super.call(
      'find_pools_for_coins',
      'find_pools_for_coins(address,address):(address[])',
      [ethereum.Value.fromAddress(_from), ethereum.Value.fromAddress(_to)]
    )

    return result[0].toAddressArray()
  }

  try_find_pools_for_coins(
    _from: Address,
    _to: Address
  ): ethereum.CallResult<Array<Address>> {
    const result = super.tryCall(
      'find_pools_for_coins',
      'find_pools_for_coins(address,address):(address[])',
      [ethereum.Value.fromAddress(_from), ethereum.Value.fromAddress(_to)]
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    const value = result.value
    return ethereum.CallResult.fromValue(value[0].toAddressArray())
  }

  get_admin_balances(_pool: Address): Array<BigInt> {
    const result = super.call(
      'get_admin_balances',
      'get_admin_balances(address):(uint256[8])',
      [ethereum.Value.fromAddress(_pool)]
    )

    return result[0].toBigIntArray()
  }

  try_get_admin_balances(_pool: Address): ethereum.CallResult<Array<BigInt>> {
    const result = super.tryCall(
      'get_admin_balances',
      'get_admin_balances(address):(uint256[8])',
      [ethereum.Value.fromAddress(_pool)]
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    const value = result.value
    return ethereum.CallResult.fromValue(value[0].toBigIntArray())
  }

  get_admin_balances1(_pool: Address, _handler_id: BigInt): Array<BigInt> {
    const result = super.call(
      'get_admin_balances',
      'get_admin_balances(address,uint256):(uint256[8])',
      [
        ethereum.Value.fromAddress(_pool),
        ethereum.Value.fromUnsignedBigInt(_handler_id)
      ]
    )

    return result[0].toBigIntArray()
  }

  try_get_admin_balances1(
    _pool: Address,
    _handler_id: BigInt
  ): ethereum.CallResult<Array<BigInt>> {
    const result = super.tryCall(
      'get_admin_balances',
      'get_admin_balances(address,uint256):(uint256[8])',
      [
        ethereum.Value.fromAddress(_pool),
        ethereum.Value.fromUnsignedBigInt(_handler_id)
      ]
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    const value = result.value
    return ethereum.CallResult.fromValue(value[0].toBigIntArray())
  }

  get_balances(_pool: Address): Array<BigInt> {
    const result = super.call(
      'get_balances',
      'get_balances(address):(uint256[8])',
      [ethereum.Value.fromAddress(_pool)]
    )

    return result[0].toBigIntArray()
  }

  try_get_balances(_pool: Address): ethereum.CallResult<Array<BigInt>> {
    const result = super.tryCall(
      'get_balances',
      'get_balances(address):(uint256[8])',
      [ethereum.Value.fromAddress(_pool)]
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    const value = result.value
    return ethereum.CallResult.fromValue(value[0].toBigIntArray())
  }

  get_balances1(_pool: Address, _handler_id: BigInt): Array<BigInt> {
    const result = super.call(
      'get_balances',
      'get_balances(address,uint256):(uint256[8])',
      [
        ethereum.Value.fromAddress(_pool),
        ethereum.Value.fromUnsignedBigInt(_handler_id)
      ]
    )

    return result[0].toBigIntArray()
  }

  try_get_balances1(
    _pool: Address,
    _handler_id: BigInt
  ): ethereum.CallResult<Array<BigInt>> {
    const result = super.tryCall(
      'get_balances',
      'get_balances(address,uint256):(uint256[8])',
      [
        ethereum.Value.fromAddress(_pool),
        ethereum.Value.fromUnsignedBigInt(_handler_id)
      ]
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    const value = result.value
    return ethereum.CallResult.fromValue(value[0].toBigIntArray())
  }

  get_base_pool(_pool: Address): Address {
    const result = super.call(
      'get_base_pool',
      'get_base_pool(address):(address)',
      [ethereum.Value.fromAddress(_pool)]
    )

    return result[0].toAddress()
  }

  try_get_base_pool(_pool: Address): ethereum.CallResult<Address> {
    const result = super.tryCall(
      'get_base_pool',
      'get_base_pool(address):(address)',
      [ethereum.Value.fromAddress(_pool)]
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    const value = result.value
    return ethereum.CallResult.fromValue(value[0].toAddress())
  }

  get_base_pool1(_pool: Address, _handler_id: BigInt): Address {
    const result = super.call(
      'get_base_pool',
      'get_base_pool(address,uint256):(address)',
      [
        ethereum.Value.fromAddress(_pool),
        ethereum.Value.fromUnsignedBigInt(_handler_id)
      ]
    )

    return result[0].toAddress()
  }

  try_get_base_pool1(
    _pool: Address,
    _handler_id: BigInt
  ): ethereum.CallResult<Address> {
    const result = super.tryCall(
      'get_base_pool',
      'get_base_pool(address,uint256):(address)',
      [
        ethereum.Value.fromAddress(_pool),
        ethereum.Value.fromUnsignedBigInt(_handler_id)
      ]
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    const value = result.value
    return ethereum.CallResult.fromValue(value[0].toAddress())
  }

  get_coin_indices(
    _pool: Address,
    _from: Address,
    _to: Address
  ): CurveMetaRegistry__get_coin_indicesResult {
    const result = super.call(
      'get_coin_indices',
      'get_coin_indices(address,address,address):(int128,int128,bool)',
      [
        ethereum.Value.fromAddress(_pool),
        ethereum.Value.fromAddress(_from),
        ethereum.Value.fromAddress(_to)
      ]
    )

    return new CurveMetaRegistry__get_coin_indicesResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBoolean()
    )
  }

  try_get_coin_indices(
    _pool: Address,
    _from: Address,
    _to: Address
  ): ethereum.CallResult<CurveMetaRegistry__get_coin_indicesResult> {
    const result = super.tryCall(
      'get_coin_indices',
      'get_coin_indices(address,address,address):(int128,int128,bool)',
      [
        ethereum.Value.fromAddress(_pool),
        ethereum.Value.fromAddress(_from),
        ethereum.Value.fromAddress(_to)
      ]
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    const value = result.value
    return ethereum.CallResult.fromValue(
      new CurveMetaRegistry__get_coin_indicesResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBoolean()
      )
    )
  }

  get_coin_indices1(
    _pool: Address,
    _from: Address,
    _to: Address,
    _handler_id: BigInt
  ): CurveMetaRegistry__get_coin_indices1Result {
    const result = super.call(
      'get_coin_indices',
      'get_coin_indices(address,address,address,uint256):(int128,int128,bool)',
      [
        ethereum.Value.fromAddress(_pool),
        ethereum.Value.fromAddress(_from),
        ethereum.Value.fromAddress(_to),
        ethereum.Value.fromUnsignedBigInt(_handler_id)
      ]
    )

    return new CurveMetaRegistry__get_coin_indices1Result(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBoolean()
    )
  }

  try_get_coin_indices1(
    _pool: Address,
    _from: Address,
    _to: Address,
    _handler_id: BigInt
  ): ethereum.CallResult<CurveMetaRegistry__get_coin_indices1Result> {
    const result = super.tryCall(
      'get_coin_indices',
      'get_coin_indices(address,address,address,uint256):(int128,int128,bool)',
      [
        ethereum.Value.fromAddress(_pool),
        ethereum.Value.fromAddress(_from),
        ethereum.Value.fromAddress(_to),
        ethereum.Value.fromUnsignedBigInt(_handler_id)
      ]
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    const value = result.value
    return ethereum.CallResult.fromValue(
      new CurveMetaRegistry__get_coin_indices1Result(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBoolean()
      )
    )
  }

  get_coins(_pool: Address): Array<Address> {
    const result = super.call('get_coins', 'get_coins(address):(address[8])', [
      ethereum.Value.fromAddress(_pool)
    ])

    return result[0].toAddressArray()
  }

  try_get_coins(_pool: Address): ethereum.CallResult<Array<Address>> {
    const result = super.tryCall(
      'get_coins',
      'get_coins(address):(address[8])',
      [ethereum.Value.fromAddress(_pool)]
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    const value = result.value
    return ethereum.CallResult.fromValue(value[0].toAddressArray())
  }

  get_coins1(_pool: Address, _handler_id: BigInt): Array<Address> {
    const result = super.call(
      'get_coins',
      'get_coins(address,uint256):(address[8])',
      [
        ethereum.Value.fromAddress(_pool),
        ethereum.Value.fromUnsignedBigInt(_handler_id)
      ]
    )

    return result[0].toAddressArray()
  }

  try_get_coins1(
    _pool: Address,
    _handler_id: BigInt
  ): ethereum.CallResult<Array<Address>> {
    const result = super.tryCall(
      'get_coins',
      'get_coins(address,uint256):(address[8])',
      [
        ethereum.Value.fromAddress(_pool),
        ethereum.Value.fromUnsignedBigInt(_handler_id)
      ]
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    const value = result.value
    return ethereum.CallResult.fromValue(value[0].toAddressArray())
  }

  get_decimals(_pool: Address): Array<BigInt> {
    const result = super.call(
      'get_decimals',
      'get_decimals(address):(uint256[8])',
      [ethereum.Value.fromAddress(_pool)]
    )

    return result[0].toBigIntArray()
  }

  try_get_decimals(_pool: Address): ethereum.CallResult<Array<BigInt>> {
    const result = super.tryCall(
      'get_decimals',
      'get_decimals(address):(uint256[8])',
      [ethereum.Value.fromAddress(_pool)]
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    const value = result.value
    return ethereum.CallResult.fromValue(value[0].toBigIntArray())
  }

  get_decimals1(_pool: Address, _handler_id: BigInt): Array<BigInt> {
    const result = super.call(
      'get_decimals',
      'get_decimals(address,uint256):(uint256[8])',
      [
        ethereum.Value.fromAddress(_pool),
        ethereum.Value.fromUnsignedBigInt(_handler_id)
      ]
    )

    return result[0].toBigIntArray()
  }

  try_get_decimals1(
    _pool: Address,
    _handler_id: BigInt
  ): ethereum.CallResult<Array<BigInt>> {
    const result = super.tryCall(
      'get_decimals',
      'get_decimals(address,uint256):(uint256[8])',
      [
        ethereum.Value.fromAddress(_pool),
        ethereum.Value.fromUnsignedBigInt(_handler_id)
      ]
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    const value = result.value
    return ethereum.CallResult.fromValue(value[0].toBigIntArray())
  }

  get_fees(_pool: Address): Array<BigInt> {
    const result = super.call('get_fees', 'get_fees(address):(uint256[10])', [
      ethereum.Value.fromAddress(_pool)
    ])

    return result[0].toBigIntArray()
  }

  try_get_fees(_pool: Address): ethereum.CallResult<Array<BigInt>> {
    const result = super.tryCall(
      'get_fees',
      'get_fees(address):(uint256[10])',
      [ethereum.Value.fromAddress(_pool)]
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    const value = result.value
    return ethereum.CallResult.fromValue(value[0].toBigIntArray())
  }

  get_fees1(_pool: Address, _handler_id: BigInt): Array<BigInt> {
    const result = super.call(
      'get_fees',
      'get_fees(address,uint256):(uint256[10])',
      [
        ethereum.Value.fromAddress(_pool),
        ethereum.Value.fromUnsignedBigInt(_handler_id)
      ]
    )

    return result[0].toBigIntArray()
  }

  try_get_fees1(
    _pool: Address,
    _handler_id: BigInt
  ): ethereum.CallResult<Array<BigInt>> {
    const result = super.tryCall(
      'get_fees',
      'get_fees(address,uint256):(uint256[10])',
      [
        ethereum.Value.fromAddress(_pool),
        ethereum.Value.fromUnsignedBigInt(_handler_id)
      ]
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    const value = result.value
    return ethereum.CallResult.fromValue(value[0].toBigIntArray())
  }

  get_gauge(_pool: Address): Address {
    const result = super.call('get_gauge', 'get_gauge(address):(address)', [
      ethereum.Value.fromAddress(_pool)
    ])

    return result[0].toAddress()
  }

  try_get_gauge(_pool: Address): ethereum.CallResult<Address> {
    const result = super.tryCall('get_gauge', 'get_gauge(address):(address)', [
      ethereum.Value.fromAddress(_pool)
    ])
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    const value = result.value
    return ethereum.CallResult.fromValue(value[0].toAddress())
  }

  get_gauge1(_pool: Address, gauge_idx: BigInt): Address {
    const result = super.call(
      'get_gauge',
      'get_gauge(address,uint256):(address)',
      [
        ethereum.Value.fromAddress(_pool),
        ethereum.Value.fromUnsignedBigInt(gauge_idx)
      ]
    )

    return result[0].toAddress()
  }

  try_get_gauge1(
    _pool: Address,
    gauge_idx: BigInt
  ): ethereum.CallResult<Address> {
    const result = super.tryCall(
      'get_gauge',
      'get_gauge(address,uint256):(address)',
      [
        ethereum.Value.fromAddress(_pool),
        ethereum.Value.fromUnsignedBigInt(gauge_idx)
      ]
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    const value = result.value
    return ethereum.CallResult.fromValue(value[0].toAddress())
  }

  get_gauge2(_pool: Address, gauge_idx: BigInt, _handler_id: BigInt): Address {
    const result = super.call(
      'get_gauge',
      'get_gauge(address,uint256,uint256):(address)',
      [
        ethereum.Value.fromAddress(_pool),
        ethereum.Value.fromUnsignedBigInt(gauge_idx),
        ethereum.Value.fromUnsignedBigInt(_handler_id)
      ]
    )

    return result[0].toAddress()
  }

  try_get_gauge2(
    _pool: Address,
    gauge_idx: BigInt,
    _handler_id: BigInt
  ): ethereum.CallResult<Address> {
    const result = super.tryCall(
      'get_gauge',
      'get_gauge(address,uint256,uint256):(address)',
      [
        ethereum.Value.fromAddress(_pool),
        ethereum.Value.fromUnsignedBigInt(gauge_idx),
        ethereum.Value.fromUnsignedBigInt(_handler_id)
      ]
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    const value = result.value
    return ethereum.CallResult.fromValue(value[0].toAddress())
  }

  get_gauge_type(_pool: Address): BigInt {
    const result = super.call(
      'get_gauge_type',
      'get_gauge_type(address):(int128)',
      [ethereum.Value.fromAddress(_pool)]
    )

    return result[0].toBigInt()
  }

  try_get_gauge_type(_pool: Address): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      'get_gauge_type',
      'get_gauge_type(address):(int128)',
      [ethereum.Value.fromAddress(_pool)]
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    const value = result.value
    return ethereum.CallResult.fromValue(value[0].toBigInt())
  }

  get_gauge_type1(_pool: Address, gauge_idx: BigInt): BigInt {
    const result = super.call(
      'get_gauge_type',
      'get_gauge_type(address,uint256):(int128)',
      [
        ethereum.Value.fromAddress(_pool),
        ethereum.Value.fromUnsignedBigInt(gauge_idx)
      ]
    )

    return result[0].toBigInt()
  }

  try_get_gauge_type1(
    _pool: Address,
    gauge_idx: BigInt
  ): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      'get_gauge_type',
      'get_gauge_type(address,uint256):(int128)',
      [
        ethereum.Value.fromAddress(_pool),
        ethereum.Value.fromUnsignedBigInt(gauge_idx)
      ]
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    const value = result.value
    return ethereum.CallResult.fromValue(value[0].toBigInt())
  }

  get_gauge_type2(
    _pool: Address,
    gauge_idx: BigInt,
    _handler_id: BigInt
  ): BigInt {
    const result = super.call(
      'get_gauge_type',
      'get_gauge_type(address,uint256,uint256):(int128)',
      [
        ethereum.Value.fromAddress(_pool),
        ethereum.Value.fromUnsignedBigInt(gauge_idx),
        ethereum.Value.fromUnsignedBigInt(_handler_id)
      ]
    )

    return result[0].toBigInt()
  }

  try_get_gauge_type2(
    _pool: Address,
    gauge_idx: BigInt,
    _handler_id: BigInt
  ): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      'get_gauge_type',
      'get_gauge_type(address,uint256,uint256):(int128)',
      [
        ethereum.Value.fromAddress(_pool),
        ethereum.Value.fromUnsignedBigInt(gauge_idx),
        ethereum.Value.fromUnsignedBigInt(_handler_id)
      ]
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    const value = result.value
    return ethereum.CallResult.fromValue(value[0].toBigInt())
  }

  get_lp_token(_pool: Address): Address {
    const result = super.call(
      'get_lp_token',
      'get_lp_token(address):(address)',
      [ethereum.Value.fromAddress(_pool)]
    )

    return result[0].toAddress()
  }

  try_get_lp_token(_pool: Address): ethereum.CallResult<Address> {
    const result = super.tryCall(
      'get_lp_token',
      'get_lp_token(address):(address)',
      [ethereum.Value.fromAddress(_pool)]
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    const value = result.value
    return ethereum.CallResult.fromValue(value[0].toAddress())
  }

  get_lp_token1(_pool: Address, _handler_id: BigInt): Address {
    const result = super.call(
      'get_lp_token',
      'get_lp_token(address,uint256):(address)',
      [
        ethereum.Value.fromAddress(_pool),
        ethereum.Value.fromUnsignedBigInt(_handler_id)
      ]
    )

    return result[0].toAddress()
  }

  try_get_lp_token1(
    _pool: Address,
    _handler_id: BigInt
  ): ethereum.CallResult<Address> {
    const result = super.tryCall(
      'get_lp_token',
      'get_lp_token(address,uint256):(address)',
      [
        ethereum.Value.fromAddress(_pool),
        ethereum.Value.fromUnsignedBigInt(_handler_id)
      ]
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    const value = result.value
    return ethereum.CallResult.fromValue(value[0].toAddress())
  }

  get_n_coins(_pool: Address): BigInt {
    const result = super.call('get_n_coins', 'get_n_coins(address):(uint256)', [
      ethereum.Value.fromAddress(_pool)
    ])

    return result[0].toBigInt()
  }

  try_get_n_coins(_pool: Address): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      'get_n_coins',
      'get_n_coins(address):(uint256)',
      [ethereum.Value.fromAddress(_pool)]
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    const value = result.value
    return ethereum.CallResult.fromValue(value[0].toBigInt())
  }

  get_n_coins1(_pool: Address, _handler_id: BigInt): BigInt {
    const result = super.call(
      'get_n_coins',
      'get_n_coins(address,uint256):(uint256)',
      [
        ethereum.Value.fromAddress(_pool),
        ethereum.Value.fromUnsignedBigInt(_handler_id)
      ]
    )

    return result[0].toBigInt()
  }

  try_get_n_coins1(
    _pool: Address,
    _handler_id: BigInt
  ): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      'get_n_coins',
      'get_n_coins(address,uint256):(uint256)',
      [
        ethereum.Value.fromAddress(_pool),
        ethereum.Value.fromUnsignedBigInt(_handler_id)
      ]
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    const value = result.value
    return ethereum.CallResult.fromValue(value[0].toBigInt())
  }

  get_n_underlying_coins(_pool: Address): BigInt {
    const result = super.call(
      'get_n_underlying_coins',
      'get_n_underlying_coins(address):(uint256)',
      [ethereum.Value.fromAddress(_pool)]
    )

    return result[0].toBigInt()
  }

  try_get_n_underlying_coins(_pool: Address): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      'get_n_underlying_coins',
      'get_n_underlying_coins(address):(uint256)',
      [ethereum.Value.fromAddress(_pool)]
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    const value = result.value
    return ethereum.CallResult.fromValue(value[0].toBigInt())
  }

  get_n_underlying_coins1(_pool: Address, _handler_id: BigInt): BigInt {
    const result = super.call(
      'get_n_underlying_coins',
      'get_n_underlying_coins(address,uint256):(uint256)',
      [
        ethereum.Value.fromAddress(_pool),
        ethereum.Value.fromUnsignedBigInt(_handler_id)
      ]
    )

    return result[0].toBigInt()
  }

  try_get_n_underlying_coins1(
    _pool: Address,
    _handler_id: BigInt
  ): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      'get_n_underlying_coins',
      'get_n_underlying_coins(address,uint256):(uint256)',
      [
        ethereum.Value.fromAddress(_pool),
        ethereum.Value.fromUnsignedBigInt(_handler_id)
      ]
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    const value = result.value
    return ethereum.CallResult.fromValue(value[0].toBigInt())
  }

  get_pool_asset_type(_pool: Address): BigInt {
    const result = super.call(
      'get_pool_asset_type',
      'get_pool_asset_type(address):(uint256)',
      [ethereum.Value.fromAddress(_pool)]
    )

    return result[0].toBigInt()
  }

  try_get_pool_asset_type(_pool: Address): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      'get_pool_asset_type',
      'get_pool_asset_type(address):(uint256)',
      [ethereum.Value.fromAddress(_pool)]
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    const value = result.value
    return ethereum.CallResult.fromValue(value[0].toBigInt())
  }

  get_pool_asset_type1(_pool: Address, _handler_id: BigInt): BigInt {
    const result = super.call(
      'get_pool_asset_type',
      'get_pool_asset_type(address,uint256):(uint256)',
      [
        ethereum.Value.fromAddress(_pool),
        ethereum.Value.fromUnsignedBigInt(_handler_id)
      ]
    )

    return result[0].toBigInt()
  }

  try_get_pool_asset_type1(
    _pool: Address,
    _handler_id: BigInt
  ): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      'get_pool_asset_type',
      'get_pool_asset_type(address,uint256):(uint256)',
      [
        ethereum.Value.fromAddress(_pool),
        ethereum.Value.fromUnsignedBigInt(_handler_id)
      ]
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    const value = result.value
    return ethereum.CallResult.fromValue(value[0].toBigInt())
  }

  get_pool_from_lp_token(_token: Address): Address {
    const result = super.call(
      'get_pool_from_lp_token',
      'get_pool_from_lp_token(address):(address)',
      [ethereum.Value.fromAddress(_token)]
    )

    return result[0].toAddress()
  }

  try_get_pool_from_lp_token(_token: Address): ethereum.CallResult<Address> {
    const result = super.tryCall(
      'get_pool_from_lp_token',
      'get_pool_from_lp_token(address):(address)',
      [ethereum.Value.fromAddress(_token)]
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    const value = result.value
    return ethereum.CallResult.fromValue(value[0].toAddress())
  }

  get_pool_from_lp_token1(_token: Address, _handler_id: BigInt): Address {
    const result = super.call(
      'get_pool_from_lp_token',
      'get_pool_from_lp_token(address,uint256):(address)',
      [
        ethereum.Value.fromAddress(_token),
        ethereum.Value.fromUnsignedBigInt(_handler_id)
      ]
    )

    return result[0].toAddress()
  }

  try_get_pool_from_lp_token1(
    _token: Address,
    _handler_id: BigInt
  ): ethereum.CallResult<Address> {
    const result = super.tryCall(
      'get_pool_from_lp_token',
      'get_pool_from_lp_token(address,uint256):(address)',
      [
        ethereum.Value.fromAddress(_token),
        ethereum.Value.fromUnsignedBigInt(_handler_id)
      ]
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    const value = result.value
    return ethereum.CallResult.fromValue(value[0].toAddress())
  }

  get_pool_params(_pool: Address): Array<BigInt> {
    const result = super.call(
      'get_pool_params',
      'get_pool_params(address):(uint256[20])',
      [ethereum.Value.fromAddress(_pool)]
    )

    return result[0].toBigIntArray()
  }

  try_get_pool_params(_pool: Address): ethereum.CallResult<Array<BigInt>> {
    const result = super.tryCall(
      'get_pool_params',
      'get_pool_params(address):(uint256[20])',
      [ethereum.Value.fromAddress(_pool)]
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    const value = result.value
    return ethereum.CallResult.fromValue(value[0].toBigIntArray())
  }

  get_pool_params1(_pool: Address, _handler_id: BigInt): Array<BigInt> {
    const result = super.call(
      'get_pool_params',
      'get_pool_params(address,uint256):(uint256[20])',
      [
        ethereum.Value.fromAddress(_pool),
        ethereum.Value.fromUnsignedBigInt(_handler_id)
      ]
    )

    return result[0].toBigIntArray()
  }

  try_get_pool_params1(
    _pool: Address,
    _handler_id: BigInt
  ): ethereum.CallResult<Array<BigInt>> {
    const result = super.tryCall(
      'get_pool_params',
      'get_pool_params(address,uint256):(uint256[20])',
      [
        ethereum.Value.fromAddress(_pool),
        ethereum.Value.fromUnsignedBigInt(_handler_id)
      ]
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    const value = result.value
    return ethereum.CallResult.fromValue(value[0].toBigIntArray())
  }

  get_pool_name(_pool: Address): string {
    const result = super.call(
      'get_pool_name',
      'get_pool_name(address):(string)',
      [ethereum.Value.fromAddress(_pool)]
    )

    return result[0].toString()
  }

  try_get_pool_name(_pool: Address): ethereum.CallResult<string> {
    const result = super.tryCall(
      'get_pool_name',
      'get_pool_name(address):(string)',
      [ethereum.Value.fromAddress(_pool)]
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    const value = result.value
    return ethereum.CallResult.fromValue(value[0].toString())
  }

  get_pool_name1(_pool: Address, _handler_id: BigInt): string {
    const result = super.call(
      'get_pool_name',
      'get_pool_name(address,uint256):(string)',
      [
        ethereum.Value.fromAddress(_pool),
        ethereum.Value.fromUnsignedBigInt(_handler_id)
      ]
    )

    return result[0].toString()
  }

  try_get_pool_name1(
    _pool: Address,
    _handler_id: BigInt
  ): ethereum.CallResult<string> {
    const result = super.tryCall(
      'get_pool_name',
      'get_pool_name(address,uint256):(string)',
      [
        ethereum.Value.fromAddress(_pool),
        ethereum.Value.fromUnsignedBigInt(_handler_id)
      ]
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    const value = result.value
    return ethereum.CallResult.fromValue(value[0].toString())
  }

  get_underlying_balances(_pool: Address): Array<BigInt> {
    const result = super.call(
      'get_underlying_balances',
      'get_underlying_balances(address):(uint256[8])',
      [ethereum.Value.fromAddress(_pool)]
    )

    return result[0].toBigIntArray()
  }

  try_get_underlying_balances(
    _pool: Address
  ): ethereum.CallResult<Array<BigInt>> {
    const result = super.tryCall(
      'get_underlying_balances',
      'get_underlying_balances(address):(uint256[8])',
      [ethereum.Value.fromAddress(_pool)]
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    const value = result.value
    return ethereum.CallResult.fromValue(value[0].toBigIntArray())
  }

  get_underlying_balances1(_pool: Address, _handler_id: BigInt): Array<BigInt> {
    const result = super.call(
      'get_underlying_balances',
      'get_underlying_balances(address,uint256):(uint256[8])',
      [
        ethereum.Value.fromAddress(_pool),
        ethereum.Value.fromUnsignedBigInt(_handler_id)
      ]
    )

    return result[0].toBigIntArray()
  }

  try_get_underlying_balances1(
    _pool: Address,
    _handler_id: BigInt
  ): ethereum.CallResult<Array<BigInt>> {
    const result = super.tryCall(
      'get_underlying_balances',
      'get_underlying_balances(address,uint256):(uint256[8])',
      [
        ethereum.Value.fromAddress(_pool),
        ethereum.Value.fromUnsignedBigInt(_handler_id)
      ]
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    const value = result.value
    return ethereum.CallResult.fromValue(value[0].toBigIntArray())
  }

  get_underlying_coins(_pool: Address): Array<Address> {
    const result = super.call(
      'get_underlying_coins',
      'get_underlying_coins(address):(address[8])',
      [ethereum.Value.fromAddress(_pool)]
    )

    return result[0].toAddressArray()
  }

  try_get_underlying_coins(
    _pool: Address
  ): ethereum.CallResult<Array<Address>> {
    const result = super.tryCall(
      'get_underlying_coins',
      'get_underlying_coins(address):(address[8])',
      [ethereum.Value.fromAddress(_pool)]
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    const value = result.value
    return ethereum.CallResult.fromValue(value[0].toAddressArray())
  }

  get_underlying_coins1(_pool: Address, _handler_id: BigInt): Array<Address> {
    const result = super.call(
      'get_underlying_coins',
      'get_underlying_coins(address,uint256):(address[8])',
      [
        ethereum.Value.fromAddress(_pool),
        ethereum.Value.fromUnsignedBigInt(_handler_id)
      ]
    )

    return result[0].toAddressArray()
  }

  try_get_underlying_coins1(
    _pool: Address,
    _handler_id: BigInt
  ): ethereum.CallResult<Array<Address>> {
    const result = super.tryCall(
      'get_underlying_coins',
      'get_underlying_coins(address,uint256):(address[8])',
      [
        ethereum.Value.fromAddress(_pool),
        ethereum.Value.fromUnsignedBigInt(_handler_id)
      ]
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    const value = result.value
    return ethereum.CallResult.fromValue(value[0].toAddressArray())
  }

  get_underlying_decimals(_pool: Address): Array<BigInt> {
    const result = super.call(
      'get_underlying_decimals',
      'get_underlying_decimals(address):(uint256[8])',
      [ethereum.Value.fromAddress(_pool)]
    )

    return result[0].toBigIntArray()
  }

  try_get_underlying_decimals(
    _pool: Address
  ): ethereum.CallResult<Array<BigInt>> {
    const result = super.tryCall(
      'get_underlying_decimals',
      'get_underlying_decimals(address):(uint256[8])',
      [ethereum.Value.fromAddress(_pool)]
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    const value = result.value
    return ethereum.CallResult.fromValue(value[0].toBigIntArray())
  }

  get_underlying_decimals1(_pool: Address, _handler_id: BigInt): Array<BigInt> {
    const result = super.call(
      'get_underlying_decimals',
      'get_underlying_decimals(address,uint256):(uint256[8])',
      [
        ethereum.Value.fromAddress(_pool),
        ethereum.Value.fromUnsignedBigInt(_handler_id)
      ]
    )

    return result[0].toBigIntArray()
  }

  try_get_underlying_decimals1(
    _pool: Address,
    _handler_id: BigInt
  ): ethereum.CallResult<Array<BigInt>> {
    const result = super.tryCall(
      'get_underlying_decimals',
      'get_underlying_decimals(address,uint256):(uint256[8])',
      [
        ethereum.Value.fromAddress(_pool),
        ethereum.Value.fromUnsignedBigInt(_handler_id)
      ]
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    const value = result.value
    return ethereum.CallResult.fromValue(value[0].toBigIntArray())
  }

  get_virtual_price_from_lp_token(_token: Address): BigInt {
    const result = super.call(
      'get_virtual_price_from_lp_token',
      'get_virtual_price_from_lp_token(address):(uint256)',
      [ethereum.Value.fromAddress(_token)]
    )

    return result[0].toBigInt()
  }

  try_get_virtual_price_from_lp_token(
    _token: Address
  ): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      'get_virtual_price_from_lp_token',
      'get_virtual_price_from_lp_token(address):(uint256)',
      [ethereum.Value.fromAddress(_token)]
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    const value = result.value
    return ethereum.CallResult.fromValue(value[0].toBigInt())
  }

  get_virtual_price_from_lp_token1(
    _token: Address,
    _handler_id: BigInt
  ): BigInt {
    const result = super.call(
      'get_virtual_price_from_lp_token',
      'get_virtual_price_from_lp_token(address,uint256):(uint256)',
      [
        ethereum.Value.fromAddress(_token),
        ethereum.Value.fromUnsignedBigInt(_handler_id)
      ]
    )

    return result[0].toBigInt()
  }

  try_get_virtual_price_from_lp_token1(
    _token: Address,
    _handler_id: BigInt
  ): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      'get_virtual_price_from_lp_token',
      'get_virtual_price_from_lp_token(address,uint256):(uint256)',
      [
        ethereum.Value.fromAddress(_token),
        ethereum.Value.fromUnsignedBigInt(_handler_id)
      ]
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    const value = result.value
    return ethereum.CallResult.fromValue(value[0].toBigInt())
  }

  is_meta(_pool: Address): boolean {
    const result = super.call('is_meta', 'is_meta(address):(bool)', [
      ethereum.Value.fromAddress(_pool)
    ])

    return result[0].toBoolean()
  }

  try_is_meta(_pool: Address): ethereum.CallResult<boolean> {
    const result = super.tryCall('is_meta', 'is_meta(address):(bool)', [
      ethereum.Value.fromAddress(_pool)
    ])
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    const value = result.value
    return ethereum.CallResult.fromValue(value[0].toBoolean())
  }

  is_meta1(_pool: Address, _handler_id: BigInt): boolean {
    const result = super.call('is_meta', 'is_meta(address,uint256):(bool)', [
      ethereum.Value.fromAddress(_pool),
      ethereum.Value.fromUnsignedBigInt(_handler_id)
    ])

    return result[0].toBoolean()
  }

  try_is_meta1(
    _pool: Address,
    _handler_id: BigInt
  ): ethereum.CallResult<boolean> {
    const result = super.tryCall('is_meta', 'is_meta(address,uint256):(bool)', [
      ethereum.Value.fromAddress(_pool),
      ethereum.Value.fromUnsignedBigInt(_handler_id)
    ])
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    const value = result.value
    return ethereum.CallResult.fromValue(value[0].toBoolean())
  }

  is_registered(_pool: Address): boolean {
    const result = super.call(
      'is_registered',
      'is_registered(address):(bool)',
      [ethereum.Value.fromAddress(_pool)]
    )

    return result[0].toBoolean()
  }

  try_is_registered(_pool: Address): ethereum.CallResult<boolean> {
    const result = super.tryCall(
      'is_registered',
      'is_registered(address):(bool)',
      [ethereum.Value.fromAddress(_pool)]
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    const value = result.value
    return ethereum.CallResult.fromValue(value[0].toBoolean())
  }

  is_registered1(_pool: Address, _handler_id: BigInt): boolean {
    const result = super.call(
      'is_registered',
      'is_registered(address,uint256):(bool)',
      [
        ethereum.Value.fromAddress(_pool),
        ethereum.Value.fromUnsignedBigInt(_handler_id)
      ]
    )

    return result[0].toBoolean()
  }

  try_is_registered1(
    _pool: Address,
    _handler_id: BigInt
  ): ethereum.CallResult<boolean> {
    const result = super.tryCall(
      'is_registered',
      'is_registered(address,uint256):(bool)',
      [
        ethereum.Value.fromAddress(_pool),
        ethereum.Value.fromUnsignedBigInt(_handler_id)
      ]
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    const value = result.value
    return ethereum.CallResult.fromValue(value[0].toBoolean())
  }

  pool_count(): BigInt {
    const result = super.call('pool_count', 'pool_count():(uint256)', [])

    return result[0].toBigInt()
  }

  try_pool_count(): ethereum.CallResult<BigInt> {
    const result = super.tryCall('pool_count', 'pool_count():(uint256)', [])
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    const value = result.value
    return ethereum.CallResult.fromValue(value[0].toBigInt())
  }

  pool_list(_index: BigInt): Address {
    const result = super.call('pool_list', 'pool_list(uint256):(address)', [
      ethereum.Value.fromUnsignedBigInt(_index)
    ])

    return result[0].toAddress()
  }

  try_pool_list(_index: BigInt): ethereum.CallResult<Address> {
    const result = super.tryCall('pool_list', 'pool_list(uint256):(address)', [
      ethereum.Value.fromUnsignedBigInt(_index)
    ])
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    const value = result.value
    return ethereum.CallResult.fromValue(value[0].toAddress())
  }

  address_provider(): Address {
    const result = super.call(
      'address_provider',
      'address_provider():(address)',
      []
    )

    return result[0].toAddress()
  }

  try_address_provider(): ethereum.CallResult<Address> {
    const result = super.tryCall(
      'address_provider',
      'address_provider():(address)',
      []
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    const value = result.value
    return ethereum.CallResult.fromValue(value[0].toAddress())
  }

  owner(): Address {
    const result = super.call('owner', 'owner():(address)', [])

    return result[0].toAddress()
  }

  try_owner(): ethereum.CallResult<Address> {
    const result = super.tryCall('owner', 'owner():(address)', [])
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    const value = result.value
    return ethereum.CallResult.fromValue(value[0].toAddress())
  }

  get_registry(arg0: BigInt): Address {
    const result = super.call(
      'get_registry',
      'get_registry(uint256):(address)',
      [ethereum.Value.fromUnsignedBigInt(arg0)]
    )

    return result[0].toAddress()
  }

  try_get_registry(arg0: BigInt): ethereum.CallResult<Address> {
    const result = super.tryCall(
      'get_registry',
      'get_registry(uint256):(address)',
      [ethereum.Value.fromUnsignedBigInt(arg0)]
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    const value = result.value
    return ethereum.CallResult.fromValue(value[0].toAddress())
  }

  registry_length(): BigInt {
    const result = super.call(
      'registry_length',
      'registry_length():(uint256)',
      []
    )

    return result[0].toBigInt()
  }

  try_registry_length(): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      'registry_length',
      'registry_length():(uint256)',
      []
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    const value = result.value
    return ethereum.CallResult.fromValue(value[0].toBigInt())
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this)
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this)
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall

  constructor(call: ConstructorCall) {
    this._call = call
  }

  get _address_provider(): Address {
    return this._call.inputValues[0].value.toAddress()
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall

  constructor(call: ConstructorCall) {
    this._call = call
  }
}

export class Add_registry_handlerCall extends ethereum.Call {
  get inputs(): Add_registry_handlerCall__Inputs {
    return new Add_registry_handlerCall__Inputs(this)
  }

  get outputs(): Add_registry_handlerCall__Outputs {
    return new Add_registry_handlerCall__Outputs(this)
  }
}

export class Add_registry_handlerCall__Inputs {
  _call: Add_registry_handlerCall

  constructor(call: Add_registry_handlerCall) {
    this._call = call
  }

  get _registry_handler(): Address {
    return this._call.inputValues[0].value.toAddress()
  }
}

export class Add_registry_handlerCall__Outputs {
  _call: Add_registry_handlerCall

  constructor(call: Add_registry_handlerCall) {
    this._call = call
  }
}

export class Update_registry_handlerCall extends ethereum.Call {
  get inputs(): Update_registry_handlerCall__Inputs {
    return new Update_registry_handlerCall__Inputs(this)
  }

  get outputs(): Update_registry_handlerCall__Outputs {
    return new Update_registry_handlerCall__Outputs(this)
  }
}

export class Update_registry_handlerCall__Inputs {
  _call: Update_registry_handlerCall

  constructor(call: Update_registry_handlerCall) {
    this._call = call
  }

  get _index(): BigInt {
    return this._call.inputValues[0].value.toBigInt()
  }

  get _registry_handler(): Address {
    return this._call.inputValues[1].value.toAddress()
  }
}

export class Update_registry_handlerCall__Outputs {
  _call: Update_registry_handlerCall

  constructor(call: Update_registry_handlerCall) {
    this._call = call
  }
}
