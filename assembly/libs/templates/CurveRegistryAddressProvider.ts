// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import { ethereum, TypedMap, Address, BigInt } from '@graphprotocol/graph-ts'

export class NewAddressIdentifier extends ethereum.Event {
  get params(): NewAddressIdentifier__Params {
    return new NewAddressIdentifier__Params(this)
  }
}

export class NewAddressIdentifier__Params {
  _event: NewAddressIdentifier

  constructor(event: NewAddressIdentifier) {
    this._event = event
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt()
  }

  get addr(): Address {
    return this._event.parameters[1].value.toAddress()
  }

  get description(): string {
    return this._event.parameters[2].value.toString()
  }
}

export class AddressModified extends ethereum.Event {
  get params(): AddressModified__Params {
    return new AddressModified__Params(this)
  }
}

export class AddressModified__Params {
  _event: AddressModified

  constructor(event: AddressModified) {
    this._event = event
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt()
  }

  get new_address(): Address {
    return this._event.parameters[1].value.toAddress()
  }

  get version(): BigInt {
    return this._event.parameters[2].value.toBigInt()
  }
}

export class CommitNewAdmin extends ethereum.Event {
  get params(): CommitNewAdmin__Params {
    return new CommitNewAdmin__Params(this)
  }
}

export class CommitNewAdmin__Params {
  _event: CommitNewAdmin

  constructor(event: CommitNewAdmin) {
    this._event = event
  }

  get deadline(): BigInt {
    return this._event.parameters[0].value.toBigInt()
  }

  get admin(): Address {
    return this._event.parameters[1].value.toAddress()
  }
}

export class NewAdmin extends ethereum.Event {
  get params(): NewAdmin__Params {
    return new NewAdmin__Params(this)
  }
}

export class NewAdmin__Params {
  _event: NewAdmin

  constructor(event: NewAdmin) {
    this._event = event
  }

  get admin(): Address {
    return this._event.parameters[0].value.toAddress()
  }
}

export class CurveRegistryAddressProvider__get_id_infoResult {
  value0: Address
  value1: boolean
  value2: BigInt
  value3: BigInt
  value4: string

  constructor(
    value0: Address,
    value1: boolean,
    value2: BigInt,
    value3: BigInt,
    value4: string
  ) {
    this.value0 = value0
    this.value1 = value1
    this.value2 = value2
    this.value3 = value3
    this.value4 = value4
  }

  toMap(): TypedMap<string, ethereum.Value> {
    const map = new TypedMap<string, ethereum.Value>()
    map.set('value0', ethereum.Value.fromAddress(this.value0))
    map.set('value1', ethereum.Value.fromBoolean(this.value1))
    map.set('value2', ethereum.Value.fromUnsignedBigInt(this.value2))
    map.set('value3', ethereum.Value.fromUnsignedBigInt(this.value3))
    map.set('value4', ethereum.Value.fromString(this.value4))
    return map
  }

  getAddr(): Address {
    return this.value0
  }

  getIs_active(): boolean {
    return this.value1
  }

  getVersion(): BigInt {
    return this.value2
  }

  getLast_modified(): BigInt {
    return this.value3
  }

  getDescription(): string {
    return this.value4
  }
}

export class CurveRegistryAddressProvider extends ethereum.SmartContract {
  static bind(address: Address): CurveRegistryAddressProvider {
    return new CurveRegistryAddressProvider(
      'CurveRegistryAddressProvider',
      address
    )
  }

  get_registry(): Address {
    const result = super.call('get_registry', 'get_registry():(address)', [])

    return result[0].toAddress()
  }

  try_get_registry(): ethereum.CallResult<Address> {
    const result = super.tryCall('get_registry', 'get_registry():(address)', [])
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    const value = result.value
    return ethereum.CallResult.fromValue(value[0].toAddress())
  }

  max_id(): BigInt {
    const result = super.call('max_id', 'max_id():(uint256)', [])

    return result[0].toBigInt()
  }

  try_max_id(): ethereum.CallResult<BigInt> {
    const result = super.tryCall('max_id', 'max_id():(uint256)', [])
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    const value = result.value
    return ethereum.CallResult.fromValue(value[0].toBigInt())
  }

  get_address(_id: BigInt): Address {
    const result = super.call('get_address', 'get_address(uint256):(address)', [
      ethereum.Value.fromUnsignedBigInt(_id)
    ])

    return result[0].toAddress()
  }

  try_get_address(_id: BigInt): ethereum.CallResult<Address> {
    const result = super.tryCall(
      'get_address',
      'get_address(uint256):(address)',
      [ethereum.Value.fromUnsignedBigInt(_id)]
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    const value = result.value
    return ethereum.CallResult.fromValue(value[0].toAddress())
  }

  add_new_id(_address: Address, _description: string): BigInt {
    const result = super.call(
      'add_new_id',
      'add_new_id(address,string):(uint256)',
      [
        ethereum.Value.fromAddress(_address),
        ethereum.Value.fromString(_description)
      ]
    )

    return result[0].toBigInt()
  }

  try_add_new_id(
    _address: Address,
    _description: string
  ): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      'add_new_id',
      'add_new_id(address,string):(uint256)',
      [
        ethereum.Value.fromAddress(_address),
        ethereum.Value.fromString(_description)
      ]
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    const value = result.value
    return ethereum.CallResult.fromValue(value[0].toBigInt())
  }

  set_address(_id: BigInt, _address: Address): boolean {
    const result = super.call(
      'set_address',
      'set_address(uint256,address):(bool)',
      [
        ethereum.Value.fromUnsignedBigInt(_id),
        ethereum.Value.fromAddress(_address)
      ]
    )

    return result[0].toBoolean()
  }

  try_set_address(
    _id: BigInt,
    _address: Address
  ): ethereum.CallResult<boolean> {
    const result = super.tryCall(
      'set_address',
      'set_address(uint256,address):(bool)',
      [
        ethereum.Value.fromUnsignedBigInt(_id),
        ethereum.Value.fromAddress(_address)
      ]
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    const value = result.value
    return ethereum.CallResult.fromValue(value[0].toBoolean())
  }

  unset_address(_id: BigInt): boolean {
    const result = super.call(
      'unset_address',
      'unset_address(uint256):(bool)',
      [ethereum.Value.fromUnsignedBigInt(_id)]
    )

    return result[0].toBoolean()
  }

  try_unset_address(_id: BigInt): ethereum.CallResult<boolean> {
    const result = super.tryCall(
      'unset_address',
      'unset_address(uint256):(bool)',
      [ethereum.Value.fromUnsignedBigInt(_id)]
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    const value = result.value
    return ethereum.CallResult.fromValue(value[0].toBoolean())
  }

  commit_transfer_ownership(_new_admin: Address): boolean {
    const result = super.call(
      'commit_transfer_ownership',
      'commit_transfer_ownership(address):(bool)',
      [ethereum.Value.fromAddress(_new_admin)]
    )

    return result[0].toBoolean()
  }

  try_commit_transfer_ownership(
    _new_admin: Address
  ): ethereum.CallResult<boolean> {
    const result = super.tryCall(
      'commit_transfer_ownership',
      'commit_transfer_ownership(address):(bool)',
      [ethereum.Value.fromAddress(_new_admin)]
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    const value = result.value
    return ethereum.CallResult.fromValue(value[0].toBoolean())
  }

  apply_transfer_ownership(): boolean {
    const result = super.call(
      'apply_transfer_ownership',
      'apply_transfer_ownership():(bool)',
      []
    )

    return result[0].toBoolean()
  }

  try_apply_transfer_ownership(): ethereum.CallResult<boolean> {
    const result = super.tryCall(
      'apply_transfer_ownership',
      'apply_transfer_ownership():(bool)',
      []
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    const value = result.value
    return ethereum.CallResult.fromValue(value[0].toBoolean())
  }

  revert_transfer_ownership(): boolean {
    const result = super.call(
      'revert_transfer_ownership',
      'revert_transfer_ownership():(bool)',
      []
    )

    return result[0].toBoolean()
  }

  try_revert_transfer_ownership(): ethereum.CallResult<boolean> {
    const result = super.tryCall(
      'revert_transfer_ownership',
      'revert_transfer_ownership():(bool)',
      []
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    const value = result.value
    return ethereum.CallResult.fromValue(value[0].toBoolean())
  }

  admin(): Address {
    const result = super.call('admin', 'admin():(address)', [])

    return result[0].toAddress()
  }

  try_admin(): ethereum.CallResult<Address> {
    const result = super.tryCall('admin', 'admin():(address)', [])
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    const value = result.value
    return ethereum.CallResult.fromValue(value[0].toAddress())
  }

  transfer_ownership_deadline(): BigInt {
    const result = super.call(
      'transfer_ownership_deadline',
      'transfer_ownership_deadline():(uint256)',
      []
    )

    return result[0].toBigInt()
  }

  try_transfer_ownership_deadline(): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      'transfer_ownership_deadline',
      'transfer_ownership_deadline():(uint256)',
      []
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    const value = result.value
    return ethereum.CallResult.fromValue(value[0].toBigInt())
  }

  future_admin(): Address {
    const result = super.call('future_admin', 'future_admin():(address)', [])

    return result[0].toAddress()
  }

  try_future_admin(): ethereum.CallResult<Address> {
    const result = super.tryCall('future_admin', 'future_admin():(address)', [])
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    const value = result.value
    return ethereum.CallResult.fromValue(value[0].toAddress())
  }

  get_id_info(arg0: BigInt): CurveRegistryAddressProvider__get_id_infoResult {
    const result = super.call(
      'get_id_info',
      'get_id_info(uint256):(address,bool,uint256,uint256,string)',
      [ethereum.Value.fromUnsignedBigInt(arg0)]
    )

    return new CurveRegistryAddressProvider__get_id_infoResult(
      result[0].toAddress(),
      result[1].toBoolean(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toString()
    )
  }

  try_get_id_info(
    arg0: BigInt
  ): ethereum.CallResult<CurveRegistryAddressProvider__get_id_infoResult> {
    const result = super.tryCall(
      'get_id_info',
      'get_id_info(uint256):(address,bool,uint256,uint256,string)',
      [ethereum.Value.fromUnsignedBigInt(arg0)]
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    const value = result.value
    return ethereum.CallResult.fromValue(
      new CurveRegistryAddressProvider__get_id_infoResult(
        value[0].toAddress(),
        value[1].toBoolean(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toString()
      )
    )
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this)
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this)
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall

  constructor(call: ConstructorCall) {
    this._call = call
  }

  get _admin(): Address {
    return this._call.inputValues[0].value.toAddress()
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall

  constructor(call: ConstructorCall) {
    this._call = call
  }
}

export class Add_new_idCall extends ethereum.Call {
  get inputs(): Add_new_idCall__Inputs {
    return new Add_new_idCall__Inputs(this)
  }

  get outputs(): Add_new_idCall__Outputs {
    return new Add_new_idCall__Outputs(this)
  }
}

export class Add_new_idCall__Inputs {
  _call: Add_new_idCall

  constructor(call: Add_new_idCall) {
    this._call = call
  }

  get _address(): Address {
    return this._call.inputValues[0].value.toAddress()
  }

  get _description(): string {
    return this._call.inputValues[1].value.toString()
  }
}

export class Add_new_idCall__Outputs {
  _call: Add_new_idCall

  constructor(call: Add_new_idCall) {
    this._call = call
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt()
  }
}

export class Set_addressCall extends ethereum.Call {
  get inputs(): Set_addressCall__Inputs {
    return new Set_addressCall__Inputs(this)
  }

  get outputs(): Set_addressCall__Outputs {
    return new Set_addressCall__Outputs(this)
  }
}

export class Set_addressCall__Inputs {
  _call: Set_addressCall

  constructor(call: Set_addressCall) {
    this._call = call
  }

  get _id(): BigInt {
    return this._call.inputValues[0].value.toBigInt()
  }

  get _address(): Address {
    return this._call.inputValues[1].value.toAddress()
  }
}

export class Set_addressCall__Outputs {
  _call: Set_addressCall

  constructor(call: Set_addressCall) {
    this._call = call
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean()
  }
}

export class Unset_addressCall extends ethereum.Call {
  get inputs(): Unset_addressCall__Inputs {
    return new Unset_addressCall__Inputs(this)
  }

  get outputs(): Unset_addressCall__Outputs {
    return new Unset_addressCall__Outputs(this)
  }
}

export class Unset_addressCall__Inputs {
  _call: Unset_addressCall

  constructor(call: Unset_addressCall) {
    this._call = call
  }

  get _id(): BigInt {
    return this._call.inputValues[0].value.toBigInt()
  }
}

export class Unset_addressCall__Outputs {
  _call: Unset_addressCall

  constructor(call: Unset_addressCall) {
    this._call = call
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean()
  }
}

export class Commit_transfer_ownershipCall extends ethereum.Call {
  get inputs(): Commit_transfer_ownershipCall__Inputs {
    return new Commit_transfer_ownershipCall__Inputs(this)
  }

  get outputs(): Commit_transfer_ownershipCall__Outputs {
    return new Commit_transfer_ownershipCall__Outputs(this)
  }
}

export class Commit_transfer_ownershipCall__Inputs {
  _call: Commit_transfer_ownershipCall

  constructor(call: Commit_transfer_ownershipCall) {
    this._call = call
  }

  get _new_admin(): Address {
    return this._call.inputValues[0].value.toAddress()
  }
}

export class Commit_transfer_ownershipCall__Outputs {
  _call: Commit_transfer_ownershipCall

  constructor(call: Commit_transfer_ownershipCall) {
    this._call = call
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean()
  }
}

export class Apply_transfer_ownershipCall extends ethereum.Call {
  get inputs(): Apply_transfer_ownershipCall__Inputs {
    return new Apply_transfer_ownershipCall__Inputs(this)
  }

  get outputs(): Apply_transfer_ownershipCall__Outputs {
    return new Apply_transfer_ownershipCall__Outputs(this)
  }
}

export class Apply_transfer_ownershipCall__Inputs {
  _call: Apply_transfer_ownershipCall

  constructor(call: Apply_transfer_ownershipCall) {
    this._call = call
  }
}

export class Apply_transfer_ownershipCall__Outputs {
  _call: Apply_transfer_ownershipCall

  constructor(call: Apply_transfer_ownershipCall) {
    this._call = call
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean()
  }
}

export class Revert_transfer_ownershipCall extends ethereum.Call {
  get inputs(): Revert_transfer_ownershipCall__Inputs {
    return new Revert_transfer_ownershipCall__Inputs(this)
  }

  get outputs(): Revert_transfer_ownershipCall__Outputs {
    return new Revert_transfer_ownershipCall__Outputs(this)
  }
}

export class Revert_transfer_ownershipCall__Inputs {
  _call: Revert_transfer_ownershipCall

  constructor(call: Revert_transfer_ownershipCall) {
    this._call = call
  }
}

export class Revert_transfer_ownershipCall__Outputs {
  _call: Revert_transfer_ownershipCall

  constructor(call: Revert_transfer_ownershipCall) {
    this._call = call
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean()
  }
}
