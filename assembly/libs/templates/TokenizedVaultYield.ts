// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import { ethereum, Address, BigInt } from '@graphprotocol/graph-ts'

export class Accrued extends ethereum.Event {
  get params(): Accrued__Params {
    return new Accrued__Params(this)
  }
}

export class Accrued__Params {
  _event: Accrued

  constructor(event: Accrued) {
    this._event = event
  }

  get interest(): BigInt {
    return this._event.parameters[0].value.toBigInt()
  }
}

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this)
  }
}

export class Approval__Params {
  _event: Approval

  constructor(event: Approval) {
    this._event = event
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress()
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress()
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt()
  }
}

export class Deposit extends ethereum.Event {
  get params(): Deposit__Params {
    return new Deposit__Params(this)
  }
}

export class Deposit__Params {
  _event: Deposit

  constructor(event: Deposit) {
    this._event = event
  }

  get caller(): Address {
    return this._event.parameters[0].value.toAddress()
  }

  get owner(): Address {
    return this._event.parameters[1].value.toAddress()
  }

  get assets(): BigInt {
    return this._event.parameters[2].value.toBigInt()
  }

  get shares(): BigInt {
    return this._event.parameters[3].value.toBigInt()
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this)
  }
}

export class Initialized__Params {
  _event: Initialized

  constructor(event: Initialized) {
    this._event = event
  }

  get version(): i32 {
    return this._event.parameters[0].value.toI32()
  }
}

export class MaxRateUpdated extends ethereum.Event {
  get params(): MaxRateUpdated__Params {
    return new MaxRateUpdated__Params(this)
  }
}

export class MaxRateUpdated__Params {
  _event: MaxRateUpdated

  constructor(event: MaxRateUpdated) {
    this._event = event
  }

  get newMaxRate(): BigInt {
    return this._event.parameters[0].value.toBigInt()
  }
}

export class RateUpdated extends ethereum.Event {
  get params(): RateUpdated__Params {
    return new RateUpdated__Params(this)
  }
}

export class RateUpdated__Params {
  _event: RateUpdated

  constructor(event: RateUpdated) {
    this._event = event
  }

  get newRate(): BigInt {
    return this._event.parameters[0].value.toBigInt()
  }
}

export class ToggledPause extends ethereum.Event {
  get params(): ToggledPause__Params {
    return new ToggledPause__Params(this)
  }
}

export class ToggledPause__Params {
  _event: ToggledPause

  constructor(event: ToggledPause) {
    this._event = event
  }

  get pauseStatus(): BigInt {
    return this._event.parameters[0].value.toBigInt()
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this)
  }
}

export class Transfer__Params {
  _event: Transfer

  constructor(event: Transfer) {
    this._event = event
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress()
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress()
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt()
  }
}

export class Withdraw extends ethereum.Event {
  get params(): Withdraw__Params {
    return new Withdraw__Params(this)
  }
}

export class Withdraw__Params {
  _event: Withdraw

  constructor(event: Withdraw) {
    this._event = event
  }

  get caller(): Address {
    return this._event.parameters[0].value.toAddress()
  }

  get receiver(): Address {
    return this._event.parameters[1].value.toAddress()
  }

  get owner(): Address {
    return this._event.parameters[2].value.toAddress()
  }

  get assets(): BigInt {
    return this._event.parameters[3].value.toBigInt()
  }

  get shares(): BigInt {
    return this._event.parameters[4].value.toBigInt()
  }
}

export class TokenizedVaultYield extends ethereum.SmartContract {
  static bind(address: Address): TokenizedVaultYield {
    return new TokenizedVaultYield('TokenizedVaultYield', address)
  }

  accessControlManager(): Address {
    const result = super.call(
      'accessControlManager',
      'accessControlManager():(address)',
      []
    )

    return result[0].toAddress()
  }

  try_accessControlManager(): ethereum.CallResult<Address> {
    const result = super.tryCall(
      'accessControlManager',
      'accessControlManager():(address)',
      []
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    const value = result.value
    return ethereum.CallResult.fromValue(value[0].toAddress())
  }

  allowance(owner: Address, spender: Address): BigInt {
    const result = super.call(
      'allowance',
      'allowance(address,address):(uint256)',
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    )

    return result[0].toBigInt()
  }

  try_allowance(owner: Address, spender: Address): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      'allowance',
      'allowance(address,address):(uint256)',
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    const value = result.value
    return ethereum.CallResult.fromValue(value[0].toBigInt())
  }

  approve(spender: Address, amount: BigInt): boolean {
    const result = super.call('approve', 'approve(address,uint256):(bool)', [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ])

    return result[0].toBoolean()
  }

  try_approve(spender: Address, amount: BigInt): ethereum.CallResult<boolean> {
    const result = super.tryCall('approve', 'approve(address,uint256):(bool)', [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ])
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    const value = result.value
    return ethereum.CallResult.fromValue(value[0].toBoolean())
  }

  asset(): Address {
    const result = super.call('asset', 'asset():(address)', [])

    return result[0].toAddress()
  }

  try_asset(): ethereum.CallResult<Address> {
    const result = super.tryCall('asset', 'asset():(address)', [])
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    const value = result.value
    return ethereum.CallResult.fromValue(value[0].toAddress())
  }

  balanceOf(account: Address): BigInt {
    const result = super.call('balanceOf', 'balanceOf(address):(uint256)', [
      ethereum.Value.fromAddress(account)
    ])

    return result[0].toBigInt()
  }

  try_balanceOf(account: Address): ethereum.CallResult<BigInt> {
    const result = super.tryCall('balanceOf', 'balanceOf(address):(uint256)', [
      ethereum.Value.fromAddress(account)
    ])
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    const value = result.value
    return ethereum.CallResult.fromValue(value[0].toBigInt())
  }

  computeUpdatedAssets(_totalAssets: BigInt, exp: BigInt): BigInt {
    const result = super.call(
      'computeUpdatedAssets',
      'computeUpdatedAssets(uint256,uint256):(uint256)',
      [
        ethereum.Value.fromUnsignedBigInt(_totalAssets),
        ethereum.Value.fromUnsignedBigInt(exp)
      ]
    )

    return result[0].toBigInt()
  }

  try_computeUpdatedAssets(
    _totalAssets: BigInt,
    exp: BigInt
  ): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      'computeUpdatedAssets',
      'computeUpdatedAssets(uint256,uint256):(uint256)',
      [
        ethereum.Value.fromUnsignedBigInt(_totalAssets),
        ethereum.Value.fromUnsignedBigInt(exp)
      ]
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    const value = result.value
    return ethereum.CallResult.fromValue(value[0].toBigInt())
  }

  convertToAssets(shares: BigInt): BigInt {
    const result = super.call(
      'convertToAssets',
      'convertToAssets(uint256):(uint256)',
      [ethereum.Value.fromUnsignedBigInt(shares)]
    )

    return result[0].toBigInt()
  }

  try_convertToAssets(shares: BigInt): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      'convertToAssets',
      'convertToAssets(uint256):(uint256)',
      [ethereum.Value.fromUnsignedBigInt(shares)]
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    const value = result.value
    return ethereum.CallResult.fromValue(value[0].toBigInt())
  }

  convertToShares(assets: BigInt): BigInt {
    const result = super.call(
      'convertToShares',
      'convertToShares(uint256):(uint256)',
      [ethereum.Value.fromUnsignedBigInt(assets)]
    )

    return result[0].toBigInt()
  }

  try_convertToShares(assets: BigInt): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      'convertToShares',
      'convertToShares(uint256):(uint256)',
      [ethereum.Value.fromUnsignedBigInt(assets)]
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    const value = result.value
    return ethereum.CallResult.fromValue(value[0].toBigInt())
  }

  decimals(): i32 {
    const result = super.call('decimals', 'decimals():(uint8)', [])

    return result[0].toI32()
  }

  try_decimals(): ethereum.CallResult<i32> {
    const result = super.tryCall('decimals', 'decimals():(uint8)', [])
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    const value = result.value
    return ethereum.CallResult.fromValue(value[0].toI32())
  }

  decreaseAllowance(spender: Address, subtractedValue: BigInt): boolean {
    const result = super.call(
      'decreaseAllowance',
      'decreaseAllowance(address,uint256):(bool)',
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    )

    return result[0].toBoolean()
  }

  try_decreaseAllowance(
    spender: Address,
    subtractedValue: BigInt
  ): ethereum.CallResult<boolean> {
    const result = super.tryCall(
      'decreaseAllowance',
      'decreaseAllowance(address,uint256):(bool)',
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    const value = result.value
    return ethereum.CallResult.fromValue(value[0].toBoolean())
  }

  deposit(assets: BigInt, receiver: Address): BigInt {
    const result = super.call('deposit', 'deposit(uint256,address):(uint256)', [
      ethereum.Value.fromUnsignedBigInt(assets),
      ethereum.Value.fromAddress(receiver)
    ])

    return result[0].toBigInt()
  }

  try_deposit(assets: BigInt, receiver: Address): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      'deposit',
      'deposit(uint256,address):(uint256)',
      [
        ethereum.Value.fromUnsignedBigInt(assets),
        ethereum.Value.fromAddress(receiver)
      ]
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    const value = result.value
    return ethereum.CallResult.fromValue(value[0].toBigInt())
  }

  estimatedAPR(): BigInt {
    const result = super.call('estimatedAPR', 'estimatedAPR():(uint256)', [])

    return result[0].toBigInt()
  }

  try_estimatedAPR(): ethereum.CallResult<BigInt> {
    const result = super.tryCall('estimatedAPR', 'estimatedAPR():(uint256)', [])
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    const value = result.value
    return ethereum.CallResult.fromValue(value[0].toBigInt())
  }

  increaseAllowance(spender: Address, addedValue: BigInt): boolean {
    const result = super.call(
      'increaseAllowance',
      'increaseAllowance(address,uint256):(bool)',
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    )

    return result[0].toBoolean()
  }

  try_increaseAllowance(
    spender: Address,
    addedValue: BigInt
  ): ethereum.CallResult<boolean> {
    const result = super.tryCall(
      'increaseAllowance',
      'increaseAllowance(address,uint256):(bool)',
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    const value = result.value
    return ethereum.CallResult.fromValue(value[0].toBoolean())
  }

  isGovernor(admin: Address): boolean {
    const result = super.call('isGovernor', 'isGovernor(address):(bool)', [
      ethereum.Value.fromAddress(admin)
    ])

    return result[0].toBoolean()
  }

  try_isGovernor(admin: Address): ethereum.CallResult<boolean> {
    const result = super.tryCall('isGovernor', 'isGovernor(address):(bool)', [
      ethereum.Value.fromAddress(admin)
    ])
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    const value = result.value
    return ethereum.CallResult.fromValue(value[0].toBoolean())
  }

  isGovernorOrGuardian(admin: Address): boolean {
    const result = super.call(
      'isGovernorOrGuardian',
      'isGovernorOrGuardian(address):(bool)',
      [ethereum.Value.fromAddress(admin)]
    )

    return result[0].toBoolean()
  }

  try_isGovernorOrGuardian(admin: Address): ethereum.CallResult<boolean> {
    const result = super.tryCall(
      'isGovernorOrGuardian',
      'isGovernorOrGuardian(address):(bool)',
      [ethereum.Value.fromAddress(admin)]
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    const value = result.value
    return ethereum.CallResult.fromValue(value[0].toBoolean())
  }

  lastUpdate(): BigInt {
    const result = super.call('lastUpdate', 'lastUpdate():(uint40)', [])

    return result[0].toBigInt()
  }

  try_lastUpdate(): ethereum.CallResult<BigInt> {
    const result = super.tryCall('lastUpdate', 'lastUpdate():(uint40)', [])
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    const value = result.value
    return ethereum.CallResult.fromValue(value[0].toBigInt())
  }

  maxDeposit(param0: Address): BigInt {
    const result = super.call('maxDeposit', 'maxDeposit(address):(uint256)', [
      ethereum.Value.fromAddress(param0)
    ])

    return result[0].toBigInt()
  }

  try_maxDeposit(param0: Address): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      'maxDeposit',
      'maxDeposit(address):(uint256)',
      [ethereum.Value.fromAddress(param0)]
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    const value = result.value
    return ethereum.CallResult.fromValue(value[0].toBigInt())
  }

  maxMint(param0: Address): BigInt {
    const result = super.call('maxMint', 'maxMint(address):(uint256)', [
      ethereum.Value.fromAddress(param0)
    ])

    return result[0].toBigInt()
  }

  try_maxMint(param0: Address): ethereum.CallResult<BigInt> {
    const result = super.tryCall('maxMint', 'maxMint(address):(uint256)', [
      ethereum.Value.fromAddress(param0)
    ])
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    const value = result.value
    return ethereum.CallResult.fromValue(value[0].toBigInt())
  }

  maxRate(): BigInt {
    const result = super.call('maxRate', 'maxRate():(uint256)', [])

    return result[0].toBigInt()
  }

  try_maxRate(): ethereum.CallResult<BigInt> {
    const result = super.tryCall('maxRate', 'maxRate():(uint256)', [])
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    const value = result.value
    return ethereum.CallResult.fromValue(value[0].toBigInt())
  }

  maxRedeem(owner: Address): BigInt {
    const result = super.call('maxRedeem', 'maxRedeem(address):(uint256)', [
      ethereum.Value.fromAddress(owner)
    ])

    return result[0].toBigInt()
  }

  try_maxRedeem(owner: Address): ethereum.CallResult<BigInt> {
    const result = super.tryCall('maxRedeem', 'maxRedeem(address):(uint256)', [
      ethereum.Value.fromAddress(owner)
    ])
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    const value = result.value
    return ethereum.CallResult.fromValue(value[0].toBigInt())
  }

  maxWithdraw(owner: Address): BigInt {
    const result = super.call('maxWithdraw', 'maxWithdraw(address):(uint256)', [
      ethereum.Value.fromAddress(owner)
    ])

    return result[0].toBigInt()
  }

  try_maxWithdraw(owner: Address): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      'maxWithdraw',
      'maxWithdraw(address):(uint256)',
      [ethereum.Value.fromAddress(owner)]
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    const value = result.value
    return ethereum.CallResult.fromValue(value[0].toBigInt())
  }

  mint(shares: BigInt, receiver: Address): BigInt {
    const result = super.call('mint', 'mint(uint256,address):(uint256)', [
      ethereum.Value.fromUnsignedBigInt(shares),
      ethereum.Value.fromAddress(receiver)
    ])

    return result[0].toBigInt()
  }

  try_mint(shares: BigInt, receiver: Address): ethereum.CallResult<BigInt> {
    const result = super.tryCall('mint', 'mint(uint256,address):(uint256)', [
      ethereum.Value.fromUnsignedBigInt(shares),
      ethereum.Value.fromAddress(receiver)
    ])
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    const value = result.value
    return ethereum.CallResult.fromValue(value[0].toBigInt())
  }

  name(): string {
    const result = super.call('name', 'name():(string)', [])

    return result[0].toString()
  }

  try_name(): ethereum.CallResult<string> {
    const result = super.tryCall('name', 'name():(string)', [])
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    const value = result.value
    return ethereum.CallResult.fromValue(value[0].toString())
  }

  paused(): i32 {
    const result = super.call('paused', 'paused():(uint8)', [])

    return result[0].toI32()
  }

  try_paused(): ethereum.CallResult<i32> {
    const result = super.tryCall('paused', 'paused():(uint8)', [])
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    const value = result.value
    return ethereum.CallResult.fromValue(value[0].toI32())
  }

  previewDeposit(assets: BigInt): BigInt {
    const result = super.call(
      'previewDeposit',
      'previewDeposit(uint256):(uint256)',
      [ethereum.Value.fromUnsignedBigInt(assets)]
    )

    return result[0].toBigInt()
  }

  try_previewDeposit(assets: BigInt): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      'previewDeposit',
      'previewDeposit(uint256):(uint256)',
      [ethereum.Value.fromUnsignedBigInt(assets)]
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    const value = result.value
    return ethereum.CallResult.fromValue(value[0].toBigInt())
  }

  previewMint(shares: BigInt): BigInt {
    const result = super.call('previewMint', 'previewMint(uint256):(uint256)', [
      ethereum.Value.fromUnsignedBigInt(shares)
    ])

    return result[0].toBigInt()
  }

  try_previewMint(shares: BigInt): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      'previewMint',
      'previewMint(uint256):(uint256)',
      [ethereum.Value.fromUnsignedBigInt(shares)]
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    const value = result.value
    return ethereum.CallResult.fromValue(value[0].toBigInt())
  }

  previewRedeem(shares: BigInt): BigInt {
    const result = super.call(
      'previewRedeem',
      'previewRedeem(uint256):(uint256)',
      [ethereum.Value.fromUnsignedBigInt(shares)]
    )

    return result[0].toBigInt()
  }

  try_previewRedeem(shares: BigInt): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      'previewRedeem',
      'previewRedeem(uint256):(uint256)',
      [ethereum.Value.fromUnsignedBigInt(shares)]
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    const value = result.value
    return ethereum.CallResult.fromValue(value[0].toBigInt())
  }

  previewWithdraw(assets: BigInt): BigInt {
    const result = super.call(
      'previewWithdraw',
      'previewWithdraw(uint256):(uint256)',
      [ethereum.Value.fromUnsignedBigInt(assets)]
    )

    return result[0].toBigInt()
  }

  try_previewWithdraw(assets: BigInt): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      'previewWithdraw',
      'previewWithdraw(uint256):(uint256)',
      [ethereum.Value.fromUnsignedBigInt(assets)]
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    const value = result.value
    return ethereum.CallResult.fromValue(value[0].toBigInt())
  }

  rate(): BigInt {
    const result = super.call('rate', 'rate():(uint208)', [])

    return result[0].toBigInt()
  }

  try_rate(): ethereum.CallResult<BigInt> {
    const result = super.tryCall('rate', 'rate():(uint208)', [])
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    const value = result.value
    return ethereum.CallResult.fromValue(value[0].toBigInt())
  }

  redeem(shares: BigInt, receiver: Address, owner: Address): BigInt {
    const result = super.call(
      'redeem',
      'redeem(uint256,address,address):(uint256)',
      [
        ethereum.Value.fromUnsignedBigInt(shares),
        ethereum.Value.fromAddress(receiver),
        ethereum.Value.fromAddress(owner)
      ]
    )

    return result[0].toBigInt()
  }

  try_redeem(
    shares: BigInt,
    receiver: Address,
    owner: Address
  ): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      'redeem',
      'redeem(uint256,address,address):(uint256)',
      [
        ethereum.Value.fromUnsignedBigInt(shares),
        ethereum.Value.fromAddress(receiver),
        ethereum.Value.fromAddress(owner)
      ]
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    const value = result.value
    return ethereum.CallResult.fromValue(value[0].toBigInt())
  }

  symbol(): string {
    const result = super.call('symbol', 'symbol():(string)', [])

    return result[0].toString()
  }

  try_symbol(): ethereum.CallResult<string> {
    const result = super.tryCall('symbol', 'symbol():(string)', [])
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    const value = result.value
    return ethereum.CallResult.fromValue(value[0].toString())
  }

  totalAssets(): BigInt {
    const result = super.call('totalAssets', 'totalAssets():(uint256)', [])

    return result[0].toBigInt()
  }

  try_totalAssets(): ethereum.CallResult<BigInt> {
    const result = super.tryCall('totalAssets', 'totalAssets():(uint256)', [])
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    const value = result.value
    return ethereum.CallResult.fromValue(value[0].toBigInt())
  }

  totalSupply(): BigInt {
    const result = super.call('totalSupply', 'totalSupply():(uint256)', [])

    return result[0].toBigInt()
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    const result = super.tryCall('totalSupply', 'totalSupply():(uint256)', [])
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    const value = result.value
    return ethereum.CallResult.fromValue(value[0].toBigInt())
  }

  transfer(to: Address, amount: BigInt): boolean {
    const result = super.call('transfer', 'transfer(address,uint256):(bool)', [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(amount)
    ])

    return result[0].toBoolean()
  }

  try_transfer(to: Address, amount: BigInt): ethereum.CallResult<boolean> {
    const result = super.tryCall(
      'transfer',
      'transfer(address,uint256):(bool)',
      [
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    const value = result.value
    return ethereum.CallResult.fromValue(value[0].toBoolean())
  }

  transferFrom(from: Address, to: Address, amount: BigInt): boolean {
    const result = super.call(
      'transferFrom',
      'transferFrom(address,address,uint256):(bool)',
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    )

    return result[0].toBoolean()
  }

  try_transferFrom(
    from: Address,
    to: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    const result = super.tryCall(
      'transferFrom',
      'transferFrom(address,address,uint256):(bool)',
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    const value = result.value
    return ethereum.CallResult.fromValue(value[0].toBoolean())
  }

  withdraw(assets: BigInt, receiver: Address, owner: Address): BigInt {
    const result = super.call(
      'withdraw',
      'withdraw(uint256,address,address):(uint256)',
      [
        ethereum.Value.fromUnsignedBigInt(assets),
        ethereum.Value.fromAddress(receiver),
        ethereum.Value.fromAddress(owner)
      ]
    )

    return result[0].toBigInt()
  }

  try_withdraw(
    assets: BigInt,
    receiver: Address,
    owner: Address
  ): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      'withdraw',
      'withdraw(uint256,address,address):(uint256)',
      [
        ethereum.Value.fromUnsignedBigInt(assets),
        ethereum.Value.fromAddress(receiver),
        ethereum.Value.fromAddress(owner)
      ]
    )
    if (result.reverted) {
      return new ethereum.CallResult()
    }
    const value = result.value
    return ethereum.CallResult.fromValue(value[0].toBigInt())
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this)
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this)
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall

  constructor(call: ApproveCall) {
    this._call = call
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress()
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt()
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall

  constructor(call: ApproveCall) {
    this._call = call
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean()
  }
}

export class DecreaseAllowanceCall extends ethereum.Call {
  get inputs(): DecreaseAllowanceCall__Inputs {
    return new DecreaseAllowanceCall__Inputs(this)
  }

  get outputs(): DecreaseAllowanceCall__Outputs {
    return new DecreaseAllowanceCall__Outputs(this)
  }
}

export class DecreaseAllowanceCall__Inputs {
  _call: DecreaseAllowanceCall

  constructor(call: DecreaseAllowanceCall) {
    this._call = call
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress()
  }

  get subtractedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt()
  }
}

export class DecreaseAllowanceCall__Outputs {
  _call: DecreaseAllowanceCall

  constructor(call: DecreaseAllowanceCall) {
    this._call = call
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean()
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this)
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this)
  }
}

export class DepositCall__Inputs {
  _call: DepositCall

  constructor(call: DepositCall) {
    this._call = call
  }

  get assets(): BigInt {
    return this._call.inputValues[0].value.toBigInt()
  }

  get receiver(): Address {
    return this._call.inputValues[1].value.toAddress()
  }
}

export class DepositCall__Outputs {
  _call: DepositCall

  constructor(call: DepositCall) {
    this._call = call
  }

  get shares(): BigInt {
    return this._call.outputValues[0].value.toBigInt()
  }
}

export class IncreaseAllowanceCall extends ethereum.Call {
  get inputs(): IncreaseAllowanceCall__Inputs {
    return new IncreaseAllowanceCall__Inputs(this)
  }

  get outputs(): IncreaseAllowanceCall__Outputs {
    return new IncreaseAllowanceCall__Outputs(this)
  }
}

export class IncreaseAllowanceCall__Inputs {
  _call: IncreaseAllowanceCall

  constructor(call: IncreaseAllowanceCall) {
    this._call = call
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress()
  }

  get addedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt()
  }
}

export class IncreaseAllowanceCall__Outputs {
  _call: IncreaseAllowanceCall

  constructor(call: IncreaseAllowanceCall) {
    this._call = call
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean()
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this)
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this)
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall

  constructor(call: InitializeCall) {
    this._call = call
  }

  get _accessControlManager(): Address {
    return this._call.inputValues[0].value.toAddress()
  }

  get asset_(): Address {
    return this._call.inputValues[1].value.toAddress()
  }

  get name_(): string {
    return this._call.inputValues[2].value.toString()
  }

  get symbol_(): string {
    return this._call.inputValues[3].value.toString()
  }

  get divizer(): BigInt {
    return this._call.inputValues[4].value.toBigInt()
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall

  constructor(call: InitializeCall) {
    this._call = call
  }
}

export class MintCall extends ethereum.Call {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this)
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this)
  }
}

export class MintCall__Inputs {
  _call: MintCall

  constructor(call: MintCall) {
    this._call = call
  }

  get shares(): BigInt {
    return this._call.inputValues[0].value.toBigInt()
  }

  get receiver(): Address {
    return this._call.inputValues[1].value.toAddress()
  }
}

export class MintCall__Outputs {
  _call: MintCall

  constructor(call: MintCall) {
    this._call = call
  }

  get assets(): BigInt {
    return this._call.outputValues[0].value.toBigInt()
  }
}

export class RedeemCall extends ethereum.Call {
  get inputs(): RedeemCall__Inputs {
    return new RedeemCall__Inputs(this)
  }

  get outputs(): RedeemCall__Outputs {
    return new RedeemCall__Outputs(this)
  }
}

export class RedeemCall__Inputs {
  _call: RedeemCall

  constructor(call: RedeemCall) {
    this._call = call
  }

  get shares(): BigInt {
    return this._call.inputValues[0].value.toBigInt()
  }

  get receiver(): Address {
    return this._call.inputValues[1].value.toAddress()
  }

  get owner(): Address {
    return this._call.inputValues[2].value.toAddress()
  }
}

export class RedeemCall__Outputs {
  _call: RedeemCall

  constructor(call: RedeemCall) {
    this._call = call
  }

  get assets(): BigInt {
    return this._call.outputValues[0].value.toBigInt()
  }
}

export class SetMaxRateCall extends ethereum.Call {
  get inputs(): SetMaxRateCall__Inputs {
    return new SetMaxRateCall__Inputs(this)
  }

  get outputs(): SetMaxRateCall__Outputs {
    return new SetMaxRateCall__Outputs(this)
  }
}

export class SetMaxRateCall__Inputs {
  _call: SetMaxRateCall

  constructor(call: SetMaxRateCall) {
    this._call = call
  }

  get newMaxRate(): BigInt {
    return this._call.inputValues[0].value.toBigInt()
  }
}

export class SetMaxRateCall__Outputs {
  _call: SetMaxRateCall

  constructor(call: SetMaxRateCall) {
    this._call = call
  }
}

export class SetNameAndSymbolCall extends ethereum.Call {
  get inputs(): SetNameAndSymbolCall__Inputs {
    return new SetNameAndSymbolCall__Inputs(this)
  }

  get outputs(): SetNameAndSymbolCall__Outputs {
    return new SetNameAndSymbolCall__Outputs(this)
  }
}

export class SetNameAndSymbolCall__Inputs {
  _call: SetNameAndSymbolCall

  constructor(call: SetNameAndSymbolCall) {
    this._call = call
  }

  get newName(): string {
    return this._call.inputValues[0].value.toString()
  }

  get newSymbol(): string {
    return this._call.inputValues[1].value.toString()
  }
}

export class SetNameAndSymbolCall__Outputs {
  _call: SetNameAndSymbolCall

  constructor(call: SetNameAndSymbolCall) {
    this._call = call
  }
}

export class SetRateCall extends ethereum.Call {
  get inputs(): SetRateCall__Inputs {
    return new SetRateCall__Inputs(this)
  }

  get outputs(): SetRateCall__Outputs {
    return new SetRateCall__Outputs(this)
  }
}

export class SetRateCall__Inputs {
  _call: SetRateCall

  constructor(call: SetRateCall) {
    this._call = call
  }

  get newRate(): BigInt {
    return this._call.inputValues[0].value.toBigInt()
  }
}

export class SetRateCall__Outputs {
  _call: SetRateCall

  constructor(call: SetRateCall) {
    this._call = call
  }
}

export class TogglePauseCall extends ethereum.Call {
  get inputs(): TogglePauseCall__Inputs {
    return new TogglePauseCall__Inputs(this)
  }

  get outputs(): TogglePauseCall__Outputs {
    return new TogglePauseCall__Outputs(this)
  }
}

export class TogglePauseCall__Inputs {
  _call: TogglePauseCall

  constructor(call: TogglePauseCall) {
    this._call = call
  }
}

export class TogglePauseCall__Outputs {
  _call: TogglePauseCall

  constructor(call: TogglePauseCall) {
    this._call = call
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this)
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this)
  }
}

export class TransferCall__Inputs {
  _call: TransferCall

  constructor(call: TransferCall) {
    this._call = call
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress()
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt()
  }
}

export class TransferCall__Outputs {
  _call: TransferCall

  constructor(call: TransferCall) {
    this._call = call
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean()
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this)
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this)
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall

  constructor(call: TransferFromCall) {
    this._call = call
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress()
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress()
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt()
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall

  constructor(call: TransferFromCall) {
    this._call = call
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean()
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this)
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this)
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall

  constructor(call: WithdrawCall) {
    this._call = call
  }

  get assets(): BigInt {
    return this._call.inputValues[0].value.toBigInt()
  }

  get receiver(): Address {
    return this._call.inputValues[1].value.toAddress()
  }

  get owner(): Address {
    return this._call.inputValues[2].value.toAddress()
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall

  constructor(call: WithdrawCall) {
    this._call = call
  }

  get shares(): BigInt {
    return this._call.outputValues[0].value.toBigInt()
  }
}
